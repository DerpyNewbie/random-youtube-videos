using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Util.Store;
using Google.Apis.YouTube.v3;
using Google.Apis.YouTube.v3.Data;

namespace RandomYoutubeVideos
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            RandomWords.Initialize();
            UserCredential credential;
            using (var stream = new FileStream("client_secrets.json", FileMode.Open, FileAccess.Read))
            {
                credential = await GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    // This OAuth 2.0 access scope allows for full read/write access to the
                    // authenticated user's account.
                    new[] {YouTubeService.Scope.Youtube},
                    "user",
                    CancellationToken.None,
                    new FileDataStore("RandomYoutubeVideos")
                );
            }

            YouTubeService service = new YouTubeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "RandomYoutubeVideos"
            });

            await CreateRandomVideoPlaylist(service);
        }

        public static async Task CreateRandomVideoPlaylist(YouTubeService service, int playlistLength = 30)
        {
            Random rnd = new Random();
            Playlist playlist = await CreatePlaylist(service, "RandomYoutubeVideos");
            Console.WriteLine("Created playlist: {0} ({1} - {2})", playlist.Id, playlist.Snippet.Title,
                playlist.Snippet.Description);
            for (int i = 0; i < playlistLength; i++)
            {
                List<string> videos = await Search(service, RandomWords.GetRandomWords(rnd.Next(2, 5)));
                if (videos.Count <= 0) continue;
                var playlistItem = await AddPlaylistItem(service, playlist.Id, videos[rnd.Next(0, videos.Count)]);
                Console.WriteLine("Added playlist item: {0}", playlistItem.Id);
            }

            Console.WriteLine("Completed playlist: {0} ({1} - {2})", playlist.Id, playlist.Snippet.Title,
                playlist.Snippet.Description);
        }

        public static async Task<List<string>> Search(YouTubeService service, string query, int maxResult = 5)
        {
            var searchListReq = service.Search.List("id");
            searchListReq.Q = query;
            searchListReq.MaxResults = maxResult;

            var searchResponse = await searchListReq.ExecuteAsync();
            List<string> videos = new List<string>();

            // Add each result to the appropriate list, and then display the lists of
            // matching videos, channels, and playlists.
            foreach (var searchResult in searchResponse.Items)
            {
                switch (searchResult.Id.Kind)
                {
                    case "youtube#video":
                        videos.Add($"{searchResult.Id.VideoId}");
                        break;
                }
            }

            return videos;
        }

        public static async Task<Playlist> CreatePlaylist(YouTubeService service, string title)
        {
            var newPlaylist = new Playlist();
            newPlaylist.Snippet = new PlaylistSnippet();
            newPlaylist.Snippet.Title = title;
            newPlaylist.Snippet.Description = "Generated by RandomYoutubeVideos, Made by twitter@derpynewbie.";
            newPlaylist.Status = new PlaylistStatus();
            newPlaylist.Status.PrivacyStatus = "public";
            return await service.Playlists.Insert(newPlaylist, "snippet,status").ExecuteAsync();
        }

        public static async Task<PlaylistItem> AddPlaylistItem(YouTubeService service, string playlistId,
            string videoId)
        {
            var newPlaylistItem = new PlaylistItem();
            newPlaylistItem.Snippet = new PlaylistItemSnippet();
            newPlaylistItem.Snippet.PlaylistId = playlistId;
            newPlaylistItem.Snippet.ResourceId = new ResourceId();
            newPlaylistItem.Snippet.ResourceId.Kind = "youtube#video";
            newPlaylistItem.Snippet.ResourceId.VideoId = videoId;
            return await service.PlaylistItems.Insert(newPlaylistItem, "snippet").ExecuteAsync();
        }
    }
}